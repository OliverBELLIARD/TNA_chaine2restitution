function Xout = interpolate_audio(Xin, Fs, L, Nbits)
%% Interpolate an audio signal by an L ratio with an SNR of Nbits resolution
if nargin < 4
    Nbits = 20; % Default: 20 bits for calculating stopband attenuation
end

% Upsampled sampling rate
Fs_up = Fs * L;

%% Anti-Aliasing Filter Design
Fp = 20e3;           % Passband edge frequency
Fst = Fs / 2;     % Stopband edge frequency
Apass = 0.01;        % Passband ripple in dB
Astop = 1.76 + 6.02 * Nbits; % Stopband attenuation in dB

h = fdesign.lowpass('Fp,Fst,Ap,Ast', Fp, Fst, Apass, Astop, Fs_up);
anti_alias_filter = design(h, 'ellip', 'SystemObject', true);

Fpass = 20000;             % Passband Frequency
Fstop = Fs / 2;             % Stopband Frequency
Dpass = power(10, Apass/20);  % Passband Ripple
Dstop = power(10, -Astop/20);  % Stopband Attenuation
dens  = 20;                % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
anti_alias_filter = dfilt.dffir(b);

%% Upsample and Filter
% Zero-padding for upsampling
upsampled_signal = zeros(1, L * length(Xin));
upsampled_signal(1:L:end) = Xin; % Insert original samples with L-1 zeros in between

% Apply anti-aliasing filter
Xout = step(anti_alias_filter, upsampled_signal);
